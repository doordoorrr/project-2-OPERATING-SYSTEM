			+--------------------+
			|        CS 4100     |
			| PROJECT 2: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

Alexandria Burchfiel <adburchfie42@tntech.edu>
Lucas Dowlen <lcdowlen42@tntech.edu>
Gavin Walker <gbwalker42@tntech.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

int64_t wakeup_tick - this is used for the time that a thread should wake up
struct list sleep_list - this is the global list of threads that are sleeping

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

In timer_sleep(), execution is suspended of the calling thread until time has advanced by however
many number of timer ticks that were sent to it. Unless the system is idle, the thread need not wake up after exactly x ticks, it just needs to be put on the ready queue after they have waited for the right amount of time. On each timer interrupt, the handler checks and unblocks any threads whose wake up time has arrived and leaves the rest for until their wake-up time arrives.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

In order to minimize the amount of time spent in the interruot handler, the list of the asleep threads is sorted by whatever tick they are to wake up on. So, only the front of the list is checked. Also, the handler exits immediately if the front thread's wake up time is yet to come.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

It would be easy to use disabling interrupts, but instead we will use semaphores, locks, and condition variables to account for race conditions.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Though for this one, interrupt handlers can't use locks as needed, we will use disabling interrupts in this case only for this short critical region that is modifying the sleeping threads list

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose to implement this design because it for one avoids busy waiting which was a major requirement of the project. Also, it works to minimize the amount of time spent in the interrupt handler. Also, we chose to only use disabling interrupts where absolutely necessary and in other regions use semaphores/locks. This is superior because even though disabling interrupts works to solve the issue, but turning them off increases latency of the interrupt handling which can make the machine feel slow and sluggish.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Added to struct thread */
int base_priority;       // Original priority (without donations)
struct list donations;   // List of priority donations
struct lock *waiting_lock; // Lock this thread is waiting for

/* Added to struct lock */
struct list_elem elem;   // For priority donation list
int max_priority;        // Max priority among waiters



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)


Priority donation tracking uses a list in each thread to track donations. Nested donation example:

H (prio 63) → M (prio 31, holds Lock1) 
            → L (prio 15, holds Lock2)
After donation:
H's priority propagates to M and L
L's effective priority becomes 63


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We maintain wait queues as priority queues sorted by thread priority. 
When a lock/semaphore/condvar is released, we always wake the highest priority thread at the front of the queue.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When lock_acquire() finds a held lock:
1. Current thread donates priority to lock holder
2. If holder is blocked on another lock, recursively donate
3. Update effective priorities up the chain
Nested donations are handled by recursively propagating priority increases.


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When lock_release() is called:
1. Remove current thread's priority donation
2. Recalculate holder's priority (max of base priority and remaining donations)
3. If priority decreased, yield if needed


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A race could occur if priority is changed while handling donations. 
We avoid this by disabling interrupts during priority updates. 
Locks can't be used here because donation might need to happen during lock acquisition.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose this design because it handles both simple and nested donation cases cleanly. 
An alternative would track donation sources separately, but our approach simplifies priority recalculation when locks are released.


			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
